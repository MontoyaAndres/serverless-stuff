service: auth-test-backend
frameworkVersion: '2'

plugins:
  - serverless-appsync-plugin
  - serverless-iam-roles-per-function

provider:
  name: aws
  runtime: nodejs14.x
  lambdaHashingVersion: 20201221
  profile: andres
  region: ${self:custom.region}
  stage: ${self:custom.stage}
  versionFunctions: false
  environment:
    STAGE: ${self:custom.stage}

custom:
  stage: ${opt:stage, 'develop'}
  region: ${opt:region, 'us-east-1'}
  appSync:
    - ${file(serverless.appsync-api.yml)}

package:
  patterns:
    - '!package-lock.json'
    - '!package.json'

functions:
  createUser:
    handler: functions/create-user.handler 
    environment:
      USERS_TABLE: !Ref UsersTable
      USER_POOL_ID: !Ref CognitoUserPool
    iamRoleStatements:
      - Effect: Allow
        Action: dynamodb:PutItem
        Resource: !GetAtt UsersTable.Arn
      - Effect: Allow
        Action: cognito-idp:AdminCreateUser
        Resource: !GetAtt CognitoUserPool.Arn

resources:
  Resources:
    UsersTable:
      Type: AWS::DynamoDB::Table
      Properties:
        BillingMode: PAY_PER_REQUEST
        KeySchema:
          - AttributeName: id
            KeyType: HASH
        AttributeDefinitions:
          - AttributeName: id
            AttributeType: S
        Tags:
          - Key: Environment
            Value: ${self:custom.stage}
          - Key: Name
            Value: users-table

    CognitoUserPool:
      Type: AWS::Cognito::UserPool
      UpdateReplacePolicy: Retain
      Properties:
        AutoVerifiedAttributes:
          - email
        Policies:
          PasswordPolicy:
            MinimumLength: 8
            RequireLowercase: false
            RequireNumbers: false
            RequireUppercase: false
            RequireSymbols: false
        UsernameAttributes:
          - email
        Schema:
          - AttributeDataType: String
            Name: email
            Required: false
            Mutable: true
        AdminCreateUserConfig:
          AllowAdminCreateUserOnly: true
          InviteMessageTemplate:
            EmailSubject: "Hey! Tú cuenta ha llegado!"
            EmailMessage: "Tú usuario es {username} y contraseña {####}"
          UnusedAccountValidityDays: 7

    AdminUserPoolGroup:
      Type: AWS::Cognito::UserPoolGroup
      Properties:
        GroupName: "Admin"
        Precedence: 1
        UserPoolId: !Ref CognitoUserPool

    WebUserPoolClient:
      Type: AWS::Cognito::UserPoolClient
      Properties:
        UserPoolId: !Ref CognitoUserPool
        ClientName: auth_backend_web
        RefreshTokenValidity: 30
        ExplicitAuthFlows:
          - ALLOW_USER_SRP_AUTH
          - ALLOW_USER_PASSWORD_AUTH
          - ALLOW_REFRESH_TOKEN_AUTH
        PreventUserExistenceErrors: ENABLED
    
    ServerPoolClient:
      Type: AWS::Cognito::UserPoolClient
      Properties:
        UserPoolId: !Ref CognitoUserPool
        ClientName: auth_backend_server
        RefreshTokenValidity: 30
        GenerateSecret: true
        PreventUserExistenceErrors: ENABLED

  Outputs:
    AwsStage:
      Value: ${self:custom.stage}

    AwsRegion:
      Value: ${self:custom.region}

    CognitoUserPoolId:
      Value: !Ref CognitoUserPool

    WebCognitoUserPoolClientId:
      Value: !Ref WebUserPoolClient
    
    ServerCognitoUserPoolClientId:
      Value: !Ref ServerPoolClient
